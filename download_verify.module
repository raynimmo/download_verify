<?php
/**
 * @file
 * Creates a form to collect user data before allowing download to continue.
 */

/**
 * Implements hook_init().
 */
function download_verify_init() {
  global $base_url;
  // Get all the required variables.
  $download_verify_settings = array(
    'download_verify_email' => variable_get('download_verify_email'),
    'download_verify_css_target' => variable_get('download_verify_css_target'),
    'download_verify_intro_text' => variable_get('download_verify_intro_text'),
    'download_verify_footer_text' => variable_get('download_verify_footer_text'),
    'download_verify_cookie_display' => variable_get('download_verify_cookie_display'),
    'download_verify_cookie_expiry' => variable_get('download_verify_cookie_expiry'),
    'download_verify_mail_script_path' => $base_url . "/" . drupal_get_path('module', 'download_verify') . "/download_verify_mail_send.php",
  );
  drupal_add_js(array('download_verify' => $download_verify_settings), 'setting');
  drupal_add_js($base_url . '/misc/jquery.cookie.js');
}

/**
 * Implements hook_help().
 */
function download_verify_help($path, $arg) {
  if ($path == 'admin/help#download_verify') {
    $help_text = '<h3>' . t('Download Verify module description') . '</h3>';
    $help_text .= '<p><em>' . t('Refer to the modules README.txt for further information regarding the installation and usage of the Download Verify module.') . '</em></p>';
    $help_text .= '<p>' . t('Module for adding a form for collecting e-mail addresses from website visitors before a download can be completed.') . '</p>';
    $help_text .= '<p>' . t('The module works by using JavaScript to inject the form into the websites theme files by searching for specific hooks in the CSS.') . '</p>';
    $help_text .= '<p>' . t('The CSS hook used can be set from the modules administration panel.') . '</p>';
    $help_text .= '<p>' . t('The data submitted is e-mailed to an address specified by the site administrator within the module configuration panel.') . '</p>';
    $help_text .= '<p>' . t('When a user successfully completes the form and the download begins, a cookie is also set on the users machine so that they can download subsequent files without the need of filling out the form again.') . '</p>';
    $help_text .= '<p>' . t('The cookie will be set depending upon a selection within the modules administration panel.') . '</p>';
    $help_text .= '<p>' . t('For further information or to file an issue then refer to the modules homepage at&nbsp;') . l('https://drupal.org/project/download_verify', 'http://drupal.org/project/download_verify');

    return $help_text;
  }
}

/**
 * Implements hook_permission().
 */
function download_verify_permission() {
  return array(
    'administer download verify' => array(
      'title' => t('Administer Download Verify'),
      'description' => t('Allows a user to configure Download Verify'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function download_verify_menu() {
  $items['admin/config/download-verify'] = array(
    'title' => 'Download Verify',
    'description' => 'Configure module options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('download_verify_configuration_form'),
    'access arguments' => array('administer download verify'),
    'file' => 'download_verify.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function download_verify_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'download_verify_submission':
      $message['subject'] = t('[FORM SUBMISSION] PDF Download', $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('A document has been downloaded from your website by:<br /><br /> Firstname: @firstname <br /> Surname: @surname <br /><br /> Email: @email', array('@firstname' => $params['firstname'], '@surname' => $params['surname'], '@email' => $params['email']), $options);
      // Because this is just user-entered text, we do not need to translate it.

      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      //$message['body'][] = check_plain($params['message']);
      break;
  }
}